import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// node_modules/TagCloud/dist/TagCloud.js
var require_TagCloud = __commonJS({
  "node_modules/TagCloud/dist/TagCloud.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = global || self, global.TagCloud = factory());
    })(exports, function() {
      "use strict";
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends() {
        _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread2(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var TagCloud = function() {
        function TagCloud2() {
          var container = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document.body;
          var texts = arguments.length > 1 ? arguments[1] : void 0;
          var options = arguments.length > 2 ? arguments[2] : void 0;
          _classCallCheck(this, TagCloud2);
          var self2 = this;
          if (!container || container.nodeType !== 1)
            return new Error("Incorrect element type");
          self2.$container = container;
          self2.texts = texts || [];
          self2.config = _objectSpread2(_objectSpread2({}, TagCloud2._defaultConfig), options || {});
          self2.radius = self2.config.radius;
          self2.depth = 2 * self2.radius;
          self2.size = 1.5 * self2.radius;
          self2.maxSpeed = TagCloud2._getMaxSpeed(self2.config.maxSpeed);
          self2.initSpeed = TagCloud2._getInitSpeed(self2.config.initSpeed);
          self2.direction = self2.config.direction;
          self2.keep = self2.config.keep;
          self2.paused = false;
          self2._createElment();
          self2._init();
          TagCloud2.list.push({
            el: self2.$el,
            container,
            instance: self2
          });
        }
        _createClass(TagCloud2, [{
          key: "_createElment",
          value: function _createElment() {
            var self2 = this;
            var $el = document.createElement("div");
            $el.className = self2.config.containerClass;
            if (self2.config.useContainerInlineStyles) {
              $el.style.position = "relative";
              $el.style.width = "".concat(2 * self2.radius, "px");
              $el.style.height = "".concat(2 * self2.radius, "px");
            }
            self2.items = [];
            self2.texts.forEach(function(text, index2) {
              var item = self2._createTextItem(text, index2);
              $el.appendChild(item.el);
              self2.items.push(item);
            });
            self2.$container.appendChild($el);
            self2.$el = $el;
          }
        }, {
          key: "_createTextItem",
          value: function _createTextItem(text) {
            var index2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
            var self2 = this;
            var itemEl = document.createElement("span");
            itemEl.className = self2.config.itemClass;
            if (self2.config.useItemInlineStyles) {
              itemEl.style.willChange = "transform, opacity, filter";
              itemEl.style.position = "absolute";
              itemEl.style.top = "50%";
              itemEl.style.left = "50%";
              itemEl.style.zIndex = index2 + 1;
              itemEl.style.filter = "alpha(opacity=0)";
              itemEl.style.opacity = 0;
              var transformOrigin = "50% 50%";
              itemEl.style.WebkitTransformOrigin = transformOrigin;
              itemEl.style.MozTransformOrigin = transformOrigin;
              itemEl.style.OTransformOrigin = transformOrigin;
              itemEl.style.transformOrigin = transformOrigin;
              var transform = "translate3d(-50%, -50%, 0) scale(1)";
              itemEl.style.WebkitTransform = transform;
              itemEl.style.MozTransform = transform;
              itemEl.style.OTransform = transform;
              itemEl.style.transform = transform;
            }
            itemEl.innerText = text;
            return _objectSpread2({
              el: itemEl
            }, self2._computePosition(index2));
          }
        }, {
          key: "_computePosition",
          value: function _computePosition(index2) {
            var random = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            var self2 = this;
            var textsLength = self2.texts.length;
            if (random)
              index2 = Math.floor(Math.random() * (textsLength + 1));
            var phi = Math.acos(-1 + (2 * index2 + 1) / textsLength);
            var theta = Math.sqrt((textsLength + 1) * Math.PI) * phi;
            return {
              x: self2.size * Math.cos(theta) * Math.sin(phi) / 2,
              y: self2.size * Math.sin(theta) * Math.sin(phi) / 2,
              z: self2.size * Math.cos(phi) / 2
            };
          }
        }, {
          key: "_requestInterval",
          value: function _requestInterval(fn, delay) {
            var requestAnimFrame = function() {
              return window.requestAnimationFrame;
            }();
            var start = new Date().getTime();
            var handle = {};
            function loop() {
              handle.value = requestAnimFrame(loop);
              var current = new Date().getTime(), delta = current - start;
              if (delta >= delay) {
                fn.call();
                start = new Date().getTime();
              }
            }
            handle.value = requestAnimFrame(loop);
            return handle;
          }
        }, {
          key: "_init",
          value: function _init() {
            var self2 = this;
            self2.active = false;
            self2.mouseX0 = self2.initSpeed * Math.sin(self2.direction * (Math.PI / 180));
            self2.mouseY0 = -self2.initSpeed * Math.cos(self2.direction * (Math.PI / 180));
            self2.mouseX = self2.mouseX0;
            self2.mouseY = self2.mouseY0;
            TagCloud2._on(self2.$el, "mouseover", function() {
              self2.active = true;
            });
            TagCloud2._on(self2.$el, "mouseout", function() {
              self2.active = false;
            });
            TagCloud2._on(self2.keep ? window : self2.$el, "mousemove", function(ev) {
              ev = ev || window.event;
              var rect = self2.$el.getBoundingClientRect();
              self2.mouseX = (ev.clientX - (rect.left + rect.width / 2)) / 5;
              self2.mouseY = (ev.clientY - (rect.top + rect.height / 2)) / 5;
            });
            self2._next();
            self2.interval = self2._requestInterval(function() {
              self2._next.call(self2);
            }, 10);
          }
        }, {
          key: "_next",
          value: function _next() {
            var self2 = this;
            if (self2.paused) {
              return;
            }
            if (!self2.keep && !self2.active) {
              self2.mouseX = Math.abs(self2.mouseX - self2.mouseX0) < 1 ? self2.mouseX0 : (self2.mouseX + self2.mouseX0) / 2;
              self2.mouseY = Math.abs(self2.mouseY - self2.mouseY0) < 1 ? self2.mouseY0 : (self2.mouseY + self2.mouseY0) / 2;
            }
            var a = -(Math.min(Math.max(-self2.mouseY, -self2.size), self2.size) / self2.radius) * self2.maxSpeed;
            var b = Math.min(Math.max(-self2.mouseX, -self2.size), self2.size) / self2.radius * self2.maxSpeed;
            if (Math.abs(a) <= 0.01 && Math.abs(b) <= 0.01)
              return;
            var l = Math.PI / 180;
            var sc = [Math.sin(a * l), Math.cos(a * l), Math.sin(b * l), Math.cos(b * l)];
            self2.items.forEach(function(item) {
              var rx1 = item.x;
              var ry1 = item.y * sc[1] + item.z * -sc[0];
              var rz1 = item.y * sc[0] + item.z * sc[1];
              var rx2 = rx1 * sc[3] + rz1 * sc[2];
              var ry2 = ry1;
              var rz2 = rz1 * sc[3] - rx1 * sc[2];
              var per = 2 * self2.depth / (2 * self2.depth + rz2);
              item.x = rx2;
              item.y = ry2;
              item.z = rz2;
              item.scale = per.toFixed(3);
              var alpha = per * per - 0.25;
              alpha = (alpha > 1 ? 1 : alpha).toFixed(3);
              var itemEl = item.el;
              var left = (item.x - itemEl.offsetWidth / 2).toFixed(2);
              var top = (item.y - itemEl.offsetHeight / 2).toFixed(2);
              var transform = "translate3d(".concat(left, "px, ").concat(top, "px, 0) scale(").concat(item.scale, ")");
              itemEl.style.WebkitTransform = transform;
              itemEl.style.MozTransform = transform;
              itemEl.style.OTransform = transform;
              itemEl.style.transform = transform;
              itemEl.style.filter = "alpha(opacity=".concat(100 * alpha, ")");
              itemEl.style.opacity = alpha;
            });
          }
        }, {
          key: "update",
          value: function update(texts) {
            var self2 = this;
            self2.texts = texts || [];
            self2.texts.forEach(function(text, index2) {
              var item = self2.items[index2];
              if (!item) {
                item = self2._createTextItem(text, index2);
                _extends(item, self2._computePosition(index2, true));
                self2.$el.appendChild(item.el);
                self2.items.push(item);
              }
              item.el.innerText = text;
            });
            var textsLength = self2.texts.length;
            var itemsLength = self2.items.length;
            if (textsLength < itemsLength) {
              var removeList = self2.items.splice(textsLength, itemsLength - textsLength);
              removeList.forEach(function(item) {
                self2.$el.removeChild(item.el);
              });
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var self2 = this;
            self2.interval = null;
            var index2 = TagCloud2.list.findIndex(function(e) {
              return e.el === self2.$el;
            });
            if (index2 !== -1)
              TagCloud2.list.splice(index2, 1);
            if (self2.$container && self2.$el) {
              self2.$container.removeChild(self2.$el);
            }
          }
        }, {
          key: "pause",
          value: function pause() {
            var self2 = this;
            self2.paused = true;
          }
        }, {
          key: "resume",
          value: function resume() {
            var self2 = this;
            self2.paused = false;
          }
        }], [{
          key: "_on",
          value: function _on(el, ev, handler, cap) {
            if (el.addEventListener) {
              el.addEventListener(ev, handler, cap);
            } else if (el.attachEvent) {
              el.attachEvent("on".concat(ev), handler);
            } else {
              el["on".concat(ev)] = handler;
            }
          }
        }]);
        return TagCloud2;
      }();
      TagCloud.list = [];
      TagCloud._defaultConfig = {
        radius: 100,
        maxSpeed: "normal",
        initSpeed: "normal",
        direction: 135,
        keep: true,
        useContainerInlineStyles: true,
        useItemInlineStyles: true,
        containerClass: "tagcloud",
        itemClass: "tagcloud--item"
      };
      TagCloud._getMaxSpeed = function(name) {
        return {
          slow: 0.5,
          normal: 1,
          fast: 2
        }[name] || 1;
      };
      TagCloud._getInitSpeed = function(name) {
        return {
          slow: 16,
          normal: 32,
          fast: 80
        }[name] || 32;
      };
      var index = function(els, texts, options) {
        if (typeof els === "string")
          els = document.querySelectorAll(els);
        if (!els.forEach)
          els = [els];
        var instances = [];
        els.forEach(function(el) {
          if (el) {
            instances.push(new TagCloud(el, texts, options));
          }
        });
        return instances.length <= 1 ? instances[0] : instances;
      };
      return index;
    });
  }
});

// dep:TagCloud
var TagCloud_default = require_TagCloud();
export {
  TagCloud_default as default
};
/*!
 * TagCloud.js v2.2.0
 * Copyright (c) 2016-2021 @ Cong Min
 * MIT License - https://github.com/mcc108/TagCloud
 */
//# sourceMappingURL=TagCloud.js.map
